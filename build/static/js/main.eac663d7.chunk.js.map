{"version":3,"sources":["components/Sidebar/index.jsx","containers/Dashboard/index.jsx","containers/About/index.jsx","containers/NotFound/index.jsx","App.js","serviceWorker.js","index.js"],"names":["link","name","icon","component","this","props","id","children","className","Dashboard","About","NotFound","links","Sidebar","App","map","index","key","to","activeClassName","path","exact","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wRAiCe,G,MA5BX,WAAYA,EAAMC,EAAMC,EAAMC,GAAY,oBACtCC,KAAKJ,KAAOA,EACZI,KAAKH,KAAOA,EACZG,KAAKF,KAAOA,EACZE,KAAKD,UAAYA,IAwBV,EAnBG,SAAAE,GACd,OACI,yBAAKC,GAAG,WACJ,4BACKD,EAAME,YAeR,EARA,SAAAF,GACX,OACI,4BACI,yBAAKG,UAAU,kBAAkBH,EAAME,YClBpCE,EARG,WACd,OACI,kBAAC,WAAD,KACI,8CCKGC,EARD,WACV,OACI,kBAAC,WAAD,KACI,uCCGGC,EANE,WACb,OACI,oCCYFC,G,MAAQ,CACZ,IAAIC,EAAwB,YAAa,YAAa,uBAAGL,UAAU,sBAAwBC,GAC3F,IAAII,EAAwB,QAAS,QAAS,uBAAGL,UAAU,6BAA+BE,KAoC7EI,EAjCH,WACV,OACE,kBAAC,IAAD,KACE,kBAACD,EAAD,KAEID,EAAMG,IAAI,SAACf,EAAMgB,GAAP,OACR,kBAACH,EAAD,CAAgBI,IAAKD,EAAQ,GAC3B,kBAAC,IAAD,CAASE,GAAI,IAAMlB,EAAKA,KAAMmB,gBAAgB,UAAUnB,EAAKE,UAMrE,yBAAKI,GAAG,OACN,6BACA,kBAAC,IAAD,KAEIM,EAAMG,IAAI,SAACf,EAAMgB,GAAP,OACR,kBAAC,IAAD,CAAOC,IAAKD,EAAQ,EAAGI,KAAM,IAAMpB,EAAKA,KAAMqB,OAAK,EAAClB,UAAWH,EAAKG,cAKxE,kBAAC,IAAD,CAAOkB,OAAK,EAACD,KAAK,IAAIE,OAAQ,kBAAM,kBAAC,IAAD,CAAUJ,GAAG,kBAEjD,kBAAC,IAAD,CAAOE,KAAK,OAAOC,OAAK,EAAClB,UAAWQ,IACpC,kBAAC,IAAD,CAAOW,OAAQ,kBAAM,kBAAC,IAAD,CAAUJ,GAAG,gBCnCxBK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASN,OAAO,kBAAC,EAAD,MAASO,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.eac663d7.chunk.js","sourcesContent":["import React from 'react'\r\nimport './style.scss'\r\n\r\n// SidebarButton object prototype\r\nclass ButtonPrototype {\r\n    constructor(link, name, icon, component) {\r\n        this.link = link;\r\n        this.name = name;\r\n        this.icon = icon;\r\n        this.component = component;\r\n    }\r\n}\r\n\r\n// Sidebar container component\r\nconst Container = props => {\r\n    return (\r\n        <div id=\"Sidebar\">\r\n            <ul>\r\n                {props.children}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\n// Sidebar button component\r\nconst Button = props => {\r\n    return (\r\n        <li>\r\n            <div className=\"sidebar-button\">{props.children}</div>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default { ButtonPrototype, Container, Button }","import React, {Fragment} from 'react'\r\n\r\nconst Dashboard = () => {\r\n    return (\r\n        <Fragment>\r\n            <h1>Hello world!</h1>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Dashboard","import React, { Fragment } from 'react'\r\n\r\nconst About = () => {\r\n    return (\r\n        <Fragment>\r\n            <h1>About</h1>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default About","import React from 'react'\r\n\r\nconst NotFound = () => {\r\n    return (\r\n        <h1>404</h1>\r\n    )\r\n}\r\n\r\nexport default NotFound","import React from 'react';\r\nimport { BrowserRouter as Router, Route, NavLink, Redirect, Switch } from 'react-router-dom';\r\n\r\nimport { Sidebar } from './components'\r\nimport {\r\n  Dashboard,\r\n  About,\r\n  NotFound\r\n} from './containers'\r\n\r\nimport './App.scss';\r\n\r\n/**\r\n * List of sidebar buttons\r\n * Arguments: link, name, icon, component (in this order)\r\n**/\r\nconst links = [\r\n  new Sidebar.ButtonPrototype(\"dashboard\", \"Dashboard\", <i className=\"fas fa-lg fa-home\" />, Dashboard),\r\n  new Sidebar.ButtonPrototype(\"about\", \"About\", <i className=\"fas fa-lg fa-info-circle\" />, About),\r\n]\r\n\r\nconst App = () => {\r\n  return (\r\n    <Router>\r\n      <Sidebar.Container>\r\n        {\r\n          links.map((link, index) => (\r\n            <Sidebar.Button key={index + 1}>\r\n              <NavLink to={`/` + link.link} activeClassName=\"active\">{link.icon}</NavLink>\r\n            </Sidebar.Button>\r\n          ))\r\n        }\r\n      </Sidebar.Container>\r\n\r\n      <div id=\"App\">\r\n        <br/>\r\n        <Switch>\r\n          {\r\n            links.map((link, index) => (\r\n              <Route key={index + 1} path={'/' + link.link} exact component={link.component} />\r\n            ))\r\n          }\r\n\r\n          {/* Edge cases handling */}\r\n          <Route exact path='/' render={() => <Redirect to='/dashboard' />} />\r\n\r\n          <Route path='/404' exact component={NotFound} />\r\n          <Route render={() => <Redirect to='/404' />} />\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}